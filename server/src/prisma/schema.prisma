datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model with enhanced data types and relationships
model User {
  id               String    @id @default(uuid())
  armyNo           String?
  unit             String?
  rank             String?
  dateOfCommission DateTime?
  firstName        String
  middleName       String?
  lastName         String
  email            String    @unique
  mobileNo         String?   @unique
  dob              DateTime?

  // Direct use of enum for role without relation
  role   Role    
  patient Patient?
  //deoctors Doctor[]
}

// Enum for user roles, not used for relations
enum Role {
  ADMIN
  DOCTOR
  NURSE
  PATIENT
}

model Patient {
  id     String  @id @default(uuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  medicalRecords MedicalRecord[]
  ames ame[]
  pmes pme[]
  treatments Treatment[]
  tests          Test[]
}

model MedicalRecord {
  id            String    @id @default(uuid())
  heightCm      Int?
  weightKg      Float?
  BMI           Float?
  chest         Int?
  waist         Int?
  bloodPressure String?
  disabilities  String?
  bloodGroup    String?
  onDrug        Boolean
  date          DateTime?

  patientId String @default("27c57ab0-8e7c-4368-b22d-c2db71b316f9")
  patient   Patient @relation(fields: [patientId], references: [id])
  ames ame[]
  pmes pme[]
  treatments Treatment[]
  tests Test[]
}

model Treatment {
  id          String    @id @default(uuid())
  presentmedication String
  pastmedication String
  pasthospitalisation String
  significantpasthistory String
  knownallergies String
  miscellaneous String
  //doctorId    String
  //doctor      Doctor    @relation(fields: [doctorId], references: [id])

  patientId String @default("27c57ab0-8e7c-4368-b22d-c2db71b316f9")
  patient   Patient @relation(fields: [patientId], references: [id])

  medicalRecords MedicalRecord[]
  tests          Test[]
}

// model Doctor {
//   id             String    @id @default(uuid())
//   userId         String    @unique
//   user           User      @relation(fields: [userId], references: [id])
//   specialization String
//   departmentId   String?
//   department     Department? @relation(fields: [departmentId], references: [id])
//   treatments Treatment[]
// }

model Department {
  id       String    @id @default(uuid())
  name     String
  location String?

  //doctors Doctor[]
}
model Test {
  id       String   @id @default(uuid())
  date     DateTime
  testFor  String
  imageUrl String   @map("image_url")  // Correct attribute for mapping database column names
  result   String

  medicalRecords MedicalRecord[]
  treatments     Treatment[]
  patients Patient[]
  ameid String
  ame ame @relation(fields: [ameid], references:[ameid])
  pmeid String
  pme pme @relation(fields: [pmeid], references:[pmeid])

}


model ame {
   ameid    String  @id @default(uuid())
MedicalRecord   MedicalRecord  @relation(fields: [ameid], references: [id])

patientId String @default("27c57ab0-8e7c-4368-b22d-c2db71b316f9")
  patient   Patient @relation(fields: [patientId], references: [id])

description  String
tests Test[]
}

model pme {
  pmeid     String  @id @default(uuid())

 MedicalRecord   MedicalRecord   @relation(fields: [pmeid], references: [id])

 patientId String @default("27c57ab0-8e7c-4368-b22d-c2db71b316f9")
  patient   Patient @relation(fields: [patientId], references: [id])

 description  String
 tests Test[]
}